// UTilities
// Section/general
/* Mouse pointer */
.cursor-pointer {cursor: pointer;}

// Section/Typography
/* Text size */
// .text-xs {font-size: 0.8rem; line-height: 1.75rem;}
// .text-sm {font-size: 1rem; line-height: 1.75rem;}
// .text-xl {font-size: 1.25rem; line-height: 1.75rem;}
// .text-2xl {font-size: 1.5rem; line-height: 2rem;}
// .text-3xl {font-size: 1.875rem; line-height: 2.25rem;}
// .text-4xl {font-size: 2.25rem; line-height: 2.5rem;}
// .text-5xl {font-size: 3rem; line-height: 1;}
// .text-6xl {font-size: 3.75rem; line-height: 1;}
// .text-7xl {font-size: 4.5rem; line-height: 1;}
// .text-8xl {font-size: 6rem; line-height: 1;}
// .text-9xl {font-size: 8rem; line-height: 1;}
@each $labelTextSize,$textSize in $textSizes {
    .text-#{$labelTextSize} {
        font-size: math.div(($textSize * 0.7), 16) * 1rem!important;        
        @include mq('md') {
            font-size: math.div(($textSize * 0.75), 16) * 1rem!important;            
        }
        @include mq('lg') {
            font-size: math.div(($textSize * 0.8), 16) * 1rem!important;            
        }
        @include mq('xl') {
            font-size: math.div(($textSize * 0.9), 16) * 1rem!important;            
        }
        @include mq('2xl') {
            font-size: math.div(($textSize * 1), 16) * 1rem!important;            
        }
    }
}
// Text style & font
.font-bold {font-weight: bold;}
.font-normal { font-weight: normal; }
.font-italic {font-style: italic;}
.text-decoration-none {
    text-decoration: none;
}
.text-underline { text-decoration: underline; }
.underline { text-decoration: underline; }
.no-underline { text-decoration: none; }
.lowercase { text-transform: lowercase; }
.uppercase { text-transform: uppercase; }
.capitalize { text-transform: capitalize; }
.text-transform-none {
    text-transform: none;
}
.text-left { text-align: left; }
.text-right { text-align: right; }
.text-center { text-align: center; }
.text-justify { text-align: justify; }

// Dimensions
.w-text-bloc {
    max-width: 30rem;
}

// Build width, max-width & height utilities
@each $widthLabel, $widthSize in $widthSizes {
    .#{$widthLabel} {
        width: $widthSize;
    }
}
@each $heightLabel, $heightSize in $heightSizes {
    .#{$heightLabel} {
        height: $heightSize;
    }    
    @each $bpDevice, $bpSize in $deviceBreakpointsReverse {
        .mq#{$bpDevice}-#{$heightLabel} {
            @include mq($bpDevice) {
                height: $heightSize;
            }
        }
    }
}
@each $maxWidthLabel, $maxWidthSize in $maxWidthSizes {
    .#{$maxWidthLabel} {
        max-width: $maxWidthSize;
    }
}

.overflow-auto { overflow: auto; }

/* Box model */
$padSize: 0;
@for $i from 0 through 10 {
    .pa-#{$i} {padding: $padSize;}
    .pl-#{$i} {padding-left: $padSize;}
    .pr-#{$i} {padding-right: $padSize;}
    .pt-#{$i} {padding-top: $padSize;}
    .pb-#{$i} {padding-bottom: $padSize;}
    .px-#{$i} {padding: 0 math.div($padSize, 2);}
    .py-#{$i} {padding: math.div($padSize, 2) 0;}

    .ma-#{$i} {margin: $padSize;}
    .ml-#{$i} {margin-left: $padSize;}
    .mr-#{$i} {margin-right: $padSize;}
    .mt-#{$i} {margin-top: $padSize;}
    .mb-#{$i} {margin-bottom: $padSize;}
    .mx-#{$i} {margin: 0 math.div($padSize, 2);}
    .my-#{$i} {margin: math.div($padSize, 2) 0;}
    $padSize: $padSize + $padRatio;
}

/* Opacity */
@for $i from 0 through 10 {
    .opacity-#{$i * 10} {
        opacity: calc($i / 10);
    }
}

.push-right {margin-left: auto; margin-right: 0;}
.push-left {margin-left: 0; margin-right: auto;}
.mx-auto {margin: 0 auto !important;}

.spacer--v {
  margin: 10px 0;
  @include mq('lg') {
    margin: 20px 0;
  }
}

.spacer {
	margin-top: 40px; /* define margin as you see fit */
	height: 100px;
    &-sm {
        height: 50px;
    }
}

.sticky-top {
    position: sticky;
    top: 0;
}

.fixed-top-right {position: fixed; top: 0; right: 0;}

.block {display: block;}
// Grid & Flexbox utilities

.flex { display: flex; }
.flex-row { flex-direction: row; }
.flex-col { flex-direction: column; }
.flex-wrap { flex-wrap: wrap; }

.justify-start { justify-content: flex-start; }
.justify-end { justify-content: flex-end; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.justify-around { justify-content: space-around; }
.justify-evenly { justify-content: space-evenly; }

.items-start { align-items: flex-start; }
.items-end { align-items: flex-end; }
.items-center { align-items: center; }
.items-baseline { align-items: baseline; }
.items-stretch { align-items: stretch; }

@for $i from 1 through 20 {
    .gap-#{$i} { gap: #{$i*5}px; }
}

.x-container--evenly--wrap {    
    flex-direction: row;
    display: flex;
    justify-content: space-evenly;    
    flex-wrap: wrap;
}

.x-container--center--wrap {    
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
}

.align-items-center {
    align-items: center;
}

.d-grid {display: grid;}
.grid-icon-text {    
    grid-template-columns: 75px 1fr;
    align-items: center;
}

// Box / Layout
.border-box {
    box-sizing: border-box;
}

// Responsive
.desktop-only {
    display: none;
    @include mq('lg') {
        display: block;
    }
}

// Shadows
.shadow-primary {
    box-shadow: $shadowPrimary;
}
.shadow-secondary {
    box-shadow: $shadowSecondary;
}

// Position
.relative {
    position: relative;
}
.absolute {
    position: absolute;
}
.float-right { float: right; }
.float-left { float: left; }
.float-none { float: none; }

@include propBuild('justify-content', $flexJustify);
@include propBuild('align-items', $flexAlignItems);
@include propBuild('flex-direction', $flexDirection, flex);
@include propBuild('text-align', $alignements, text);